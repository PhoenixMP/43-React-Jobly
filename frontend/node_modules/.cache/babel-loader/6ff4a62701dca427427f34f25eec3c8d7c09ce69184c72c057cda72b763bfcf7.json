{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${this.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get all companies. */\n\n  static async getAllCompanies(name) {\n    let res = await this.request(`companies/`, {\n      name\n    });\n    return res.companies;\n  }\n\n  /** Get all jobs. */\n\n  static async getAllJobs(title) {\n    let res = await this.request(`jobs/`, {\n      title\n    });\n    return res.jobs;\n  }\n\n  /** Get User. */\n\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Register New User. */\n\n  static async registerUser(data) {\n    let token = await this.request(`auth/register`, data, 'post');\n    this.token = token.token;\n    let user = await this.getUser(data.username);\n    return user.user, token.token;\n  }\n\n  /** Login a user. */\n\n  static async loginUser(data) {\n    let res1 = await this.getUser(data.username);\n    this.token = res1.token;\n    let res2 = await this.getToken(data);\n    return res1.user, res2.token;\n  }\n\n  /** Logout a user. */\n\n  static async logoutUser() {\n    this.token = null;\n  }\n\n  /** Patch updated user. */\n\n  static async updateUser(username, data) {\n    let res = await this.request(`users/${username}`, data, 'patch');\n    return res.user;\n  }\n\n  /** Post job a user has applied to. */\n\n  static async jobApply(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, 'post');\n  }\n}\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","arguments","length","undefined","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCompany","handle","res","company","getAllCompanies","name","companies","getAllJobs","title","jobs","getUser","username","user","registerUser","loginUser","res1","res2","getToken","logoutUser","updateUser","jobApply","id"],"sources":["/home/phoenixp/springboard/unit_43/react-jobly/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${this.token}` };\n    const params = (method === \"get\")\n      ? data\n      : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get all companies. */\n\n  static async getAllCompanies(name) {\n    let res = await this.request(`companies/`, { name });\n    return res.companies;\n  }\n\n\n\n  /** Get all jobs. */\n\n  static async getAllJobs(title) {\n    let res = await this.request(`jobs/`, { title });\n    return res.jobs;\n  }\n\n\n  /** Get User. */\n\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Register New User. */\n\n  static async registerUser(data) {\n    let token = await this.request(`auth/register`, data, 'post');\n    this.token = token.token;\n    let user = await this.getUser(data.username)\n    return user.user, token.token;\n  }\n\n  /** Login a user. */\n\n  static async loginUser(data) {\n    let res1 = await this.getUser(data.username)\n    this.token = res1.token;\n    let res2 = await this.getToken(data)\n\n    return res1.user, res2.token;\n  }\n\n  /** Logout a user. */\n\n  static async logoutUser() {\n    this.token = null;\n  }\n\n\n  /** Patch updated user. */\n\n  static async updateUser(username, data) {\n    let res = await this.request(`users/${username}`, data, 'patch');\n    return res.user\n  }\n\n\n\n  /** Post job a user has applied to. */\n\n  static async jobApply(username, id) {\n    await this.request(`users/${username}/jobs/${id}`, {}, 'post');\n  }\n\n\n\n}\n\n\n\nexport default JoblyApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}