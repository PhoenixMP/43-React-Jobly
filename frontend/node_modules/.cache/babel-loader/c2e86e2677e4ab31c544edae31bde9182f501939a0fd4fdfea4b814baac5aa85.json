{"ast":null,"code":"var _jsxFileName = \"/home/phoenixp/springboard/unit_43/react-jobly/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport MyRoutes from './routes-nav/MyRoutes.js';\nimport Nav from './routes-nav/MyNav.js';\nimport UserContext from \"./profile/UserContext\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport jwt_decode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [applications, setApplications] = useState(null);\n  const [token, setToken] = useLocalStorage(null);\n  const [userInfoLoaded, setUserInfoLoaded] = useState(false);\n\n  //Register new User\n  async function registerUser(data) {\n    const res = await JoblyApi.registerUser(data);\n    setToken(res);\n  }\n\n  //Login User\n  async function loginUser(data) {\n    const res = await JoblyApi.loginUser(data);\n    setToken(res);\n  }\n\n  //Update User\n  async function updateUser(data) {\n    const user = await JoblyApi.updateUser(currentUser.username, data);\n    setCurrentUser(user);\n  }\n\n  // Check for token in local storage. \n  useEffect(() => {\n    async function checkToken() {\n      if (token) {\n        let {\n          username\n        } = jwt_decode(token);\n        JoblyApi.token = token;\n        const user = await JoblyApi.getUser(username);\n        setCurrentUser(user);\n        setApplications(user.applications);\n        setUserInfoLoaded(true);\n      }\n    }\n    checkToken();\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(BrowserRouter, {\n      children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n        value: {\n          currentUser,\n          setCurrentUser,\n          applications,\n          setApplications,\n          setToken,\n          token,\n          userInfoLoaded,\n          setUserInfoLoaded,\n          loginUser,\n          registerUser,\n          updateUser\n        },\n        children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n          children: /*#__PURE__*/_jsxDEV(MyRoutes, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mjOSkE8bgAyGJHPQ0s7UQt5p47s=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","MyRoutes","Nav","UserContext","useLocalStorage","jwt_decode","jsxDEV","_jsxDEV","App","_s","currentUser","setCurrentUser","applications","setApplications","token","setToken","userInfoLoaded","setUserInfoLoaded","registerUser","data","res","JoblyApi","loginUser","updateUser","user","username","checkToken","getUser","children","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/phoenixp/springboard/unit_43/react-jobly/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport MyRoutes from './routes-nav/MyRoutes.js'\nimport Nav from './routes-nav/MyNav.js'\nimport UserContext from \"./profile/UserContext\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport jwt_decode from \"jwt-decode\";\n\n\nfunction App() {\n\n  const [currentUser, setCurrentUser] = useState(null);\n\n  const [applications, setApplications] = useState(null);\n\n  const [token, setToken] = useLocalStorage(null);\n\n  const [userInfoLoaded, setUserInfoLoaded] = useState(false)\n\n\n  //Register new User\n  async function registerUser(data) {\n    const res = await JoblyApi.registerUser(data);\n    setToken(res);\n  }\n\n  //Login User\n  async function loginUser(data) {\n    const res = await JoblyApi.loginUser(data);\n    setToken(res);\n  }\n\n  //Update User\n  async function updateUser(data) {\n    const user = await JoblyApi.updateUser(currentUser.username, data)\n    setCurrentUser(user)\n  }\n\n\n\n  // Check for token in local storage. \n  useEffect(() => {\n    async function checkToken() {\n      if (token) {\n        let { username } = jwt_decode(token);\n        JoblyApi.token = token;\n        const user = await JoblyApi.getUser(username);\n        setCurrentUser(user);\n        setApplications(user.applications)\n        setUserInfoLoaded(true)\n\n\n      }\n    }\n    checkToken();\n  }, [token]);\n\n\n\n  return (\n    <div>\n      <BrowserRouter>\n        <UserContext.Provider value={{ currentUser, setCurrentUser, applications, setApplications, setToken, token, userInfoLoaded, setUserInfoLoaded, loginUser, registerUser, updateUser }}>\n\n          <Nav />\n          <main>\n            <MyRoutes />\n          </main>\n        </UserContext.Provider >\n      </BrowserRouter>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}