{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(_ref) {\n    let {\n      endpoint,\n      data = {},\n      method = \"get\"\n    } = _ref;\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request({\n      endpoint: `companies/${handle}`\n    });\n    return res.company;\n  }\n\n  /** Get all companies. */\n\n  static async getAllCompanies() {\n    let res = await this.request({\n      endpoint: `companies/`\n    });\n    return res.companies;\n  }\n\n  /** Get details on a job by id. */\n\n  static async getJob(id) {\n    let res = await this.request({\n      endpoint: `jobs/${id}`\n    });\n    return res.job;\n  }\n\n  /** Get all jobs. */\n\n  static async getAllJobs() {\n    let res = await this.request({\n      endpoint: `jobs/`\n    });\n    return res.jobs;\n  }\n\n  /** Register New User. */\n\n  static async registerUser(data) {\n    let res = await this.request({\n      endpoint: `auth/register`,\n      data: data,\n      method: 'post'\n    });\n    return res.company;\n  }\n\n  /** Login a user. */\n\n  static async userLogin(data) {\n    let res = await this.request({\n      endpoint: `auth/token`,\n      data,\n      method: 'post'\n    });\n    return res.token;\n  }\n\n  /** Post job a user has applied to. */\n\n  static async jobApply(username, id) {\n    let res = await this.request({\n      endpoint: `users/${username}/jobs/${id}`,\n      method: 'post'\n    });\n    return res.token;\n  }\n\n  /** Patch updated user. */\n\n  static async updateUser(username, data) {\n    let res = await this.request({\n      endpoint: `users/${username}`,\n      data,\n      method: 'patch'\n    });\n    return res.token;\n  }\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","_ref","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCompany","handle","res","company","getAllCompanies","companies","getJob","id","job","getAllJobs","jobs","registerUser","userLogin","jobApply","username","updateUser"],"sources":["/home/phoenixp/springboard/unit_43/react-jobly/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request({ endpoint, data = {}, method = \"get\" }) {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n      ? data\n      : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request({ endpoint: `companies/${handle}` });\n    return res.company;\n  }\n\n  /** Get all companies. */\n\n  static async getAllCompanies() {\n    let res = await this.request({ endpoint: `companies/` });\n    return res.companies;\n  }\n\n\n  /** Get details on a job by id. */\n\n  static async getJob(id) {\n    let res = await this.request({ endpoint: `jobs/${id}` });\n    return res.job;\n  }\n\n  /** Get all jobs. */\n\n  static async getAllJobs() {\n    let res = await this.request({ endpoint: `jobs/` });\n    return res.jobs;\n  }\n\n\n  /** Register New User. */\n\n  static async registerUser(data) {\n    let res = await this.request({ endpoint: `auth/register`, data: data, method: 'post' });\n    return res.company;\n  }\n\n  /** Login a user. */\n\n  static async userLogin(data) {\n    let res = await this.request({ endpoint: `auth/token`, data, method: 'post' });\n    return res.token;\n  }\n\n\n  /** Post job a user has applied to. */\n\n  static async jobApply(username, id) {\n    let res = await this.request({ endpoint: `users/${username}/jobs/${id}`, method: 'post' });\n    return res.token;\n  }\n\n  /** Patch updated user. */\n\n  static async updateUser(username, data) {\n    let res = await this.request({ endpoint: `users/${username}`, data, method: 'patch' });\n    return res.token;\n  }\n\n\n\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n  \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n  \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\n\nexport default JoblyApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}