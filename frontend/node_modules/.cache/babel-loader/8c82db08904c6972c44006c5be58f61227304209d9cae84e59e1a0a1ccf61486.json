{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${this.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get all companies. */\n\n  static async getAllCompanies(name) {\n    let res = await this.request(`companies/`, {\n      name\n    });\n    return res.companies;\n  }\n\n  /** Get details on a job by id. */\n\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.job;\n  }\n\n  /** Get all jobs. */\n\n  static async getAllJobs(name) {\n    let res = await this.request(`jobs/`, {\n      name\n    });\n    return res.jobs;\n  }\n\n  /** Get User. */\n\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Register New User. */\n\n  static async registerUser(data) {\n    let res = await this.request(`auth/register`, data, 'post');\n    this.token = res.token;\n    let user = this.getUser(data.username);\n    return user;\n  }\n\n  /** Login a user. */\n\n  static async loginUser(data) {\n    let res = await this.request(`auth/token`, data, 'post');\n    this.token = res.token;\n    let user = this.getUser(data.username);\n    return user;\n  }\n\n  /** Logout a user. */\n\n  static async logoutUser() {\n    this.token = null;\n  }\n\n  /** Patch updated user. */\n\n  static async updateUser(username, data) {\n    let res = await this.request(`users/${username}`, data, 'patch');\n    return res.token;\n  }\n\n  /** Post job a user has applied to. */\n\n  static async jobApply(username, id) {\n    let res = await this.request(`users/${username}/jobs/${id}`, {}, 'post');\n    return res.token;\n  }\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","arguments","length","undefined","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCompany","handle","res","company","getAllCompanies","name","companies","getJob","id","job","getAllJobs","jobs","getUser","username","user","registerUser","loginUser","logoutUser","updateUser","jobApply"],"sources":["/home/phoenixp/springboard/unit_43/react-jobly/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${this.token}` };\n    const params = (method === \"get\")\n      ? data\n      : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get all companies. */\n\n  static async getAllCompanies(name) {\n    let res = await this.request(`companies/`, { name });\n    return res.companies;\n  }\n\n\n  /** Get details on a job by id. */\n\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.job;\n  }\n\n  /** Get all jobs. */\n\n  static async getAllJobs(name) {\n    let res = await this.request(`jobs/`, { name });\n    return res.jobs;\n  }\n\n  /** Get User. */\n\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Register New User. */\n\n  static async registerUser(data) {\n    let res = await this.request(`auth/register`, data, 'post');\n    this.token = res.token;\n    let user = this.getUser(data.username)\n    return user;\n  }\n\n  /** Login a user. */\n\n  static async loginUser(data) {\n    let res = await this.request(`auth/token`, data, 'post');\n    this.token = res.token;\n    let user = this.getUser(data.username)\n    return user;\n  }\n\n  /** Logout a user. */\n\n  static async logoutUser() {\n    this.token = null;\n  }\n\n\n  /** Patch updated user. */\n\n  static async updateUser(username, data) {\n    let res = await this.request(`users/${username}`, data, 'patch');\n    return res.token;\n  }\n\n\n\n  /** Post job a user has applied to. */\n\n  static async jobApply(username, id) {\n    let res = await this.request(`users/${username}/jobs/${id}`, {}, 'post');\n    return res.token;\n  }\n\n\n\n\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n  \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n  \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\n\nexport default JoblyApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}